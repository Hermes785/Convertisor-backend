pipeline{
    agent any

    tools {
        nodejs 'NodeJs'
    }

    environment{
         APP_NAME = "convertissor_backend_img"
        DOCKER_IMAGE = "${APP_NAME}:${env.BUILD_ID}"
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
    }
    stages{
        stage('checkout code'){
            steps{
                checlout scm
            }
        }
        stage('install dependencies'){
          steps{
              sh 'npm install'
          }
        }

        stage('chargment environment variables'){
            steps{
                script{
                    sh ''' 
                     if [ -f .env.]; then
                            rm -f .env
                        fi

                        touch .env
                        echo  PDFTRON_LICENSE_KEY = ${PDFTRON_LICENSE_KEY} >> .env
                    '''
                }
            }
        } 

        stage('build ima and push it to the registry'){
            steps{
                 script{
                docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        def fullImageName = "docker.io/hermesn/convertissor_backend:${env.BUILD_ID}"
                        echo "Building Docker image ${fullImageName}"
                        sh "docker build -t ${DOCKER_IMAGE} ."
                        sh "docker tag ${DOCKER_IMAGE} ${fullImageName}"
                        sh "docker tag ${DOCKER_IMAGE} docker.io/hermesn/convertissor_backend:latest"
                        sh "docker push ${fullImageName}"
                        sh "docker push docker.io/hermesn/convertissor_backend:latest"

                        echo "Docker image pushed successfully!"
                    }
            }
            }

        }

        stage('Deploy to production environment'){
            steps{
                script{
                    '''
                    docker stop  convertissor_backend_container || true
                    docker rm convertissor_backend_container || true
                    docker=compose -f convertissor_backend_container pull
                    docker-compose -f docker-compose.yml up -d
                    
                    '''
                }
            }

        }


        stage('Supresion des images inutiles') {
            steps {
                script {
                    sh 'docker image prune -af'
                    sh 'docker container prune -f'
                    sh 'docker volume prune -f'
                    sh 'docker network prune -f'
                }
            }
        }
    }

    post {
        always {
            echo 'Actions post-pipeline en cours...'
        }
        success {
            
            echo 'Pipeline terminé avec succès!'
        }
        failure {
            echo 'Échec du pipeline. Vérifiez les journaux pour plus de détails.'
        }
    }
}